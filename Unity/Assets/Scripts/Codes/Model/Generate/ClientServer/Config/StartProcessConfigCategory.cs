//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using ET.Luban;

namespace ET
{
    [Config]
    public partial class StartProcessConfigCategory: ConfigSingleton<StartProcessConfigCategory>
    {
        private readonly List<StartProcessConfig> _dataList;
        private readonly Dictionary<int, StartProcessConfig> _dataMap;

        public StartProcessConfigCategory(ByteBuf _buf)
        {
            _dataMap = new();
            _dataList = new();

            for (int n = _buf.ReadSize(); n > 0; --n)
            {
                StartProcessConfig _v;
                _v = StartProcessConfig.DeserializeStartProcessConfig(_buf);
                _dataList.Add(_v);
                _dataMap.Add(_v.Id, _v);
            }

            PostInit();
        }

        public List<StartProcessConfig> DataList => _dataList;

        public StartProcessConfig this[int key] => _dataMap[key];

        public bool Contain(int id)
        {
            return _dataMap.ContainsKey(id);
        }

        public Dictionary<int, StartProcessConfig> GetAll()
        {
            return _dataMap;
        }

        public StartProcessConfig GetOrDefault(int key) => _dataMap.TryGetValue(key, out var v)? v : null;
        public StartProcessConfig Get(int key) => _dataMap[key];

        public StartProcessConfig GetOne(int key)
        {
            if (this._dataMap is not { Count: > 0 })
            {
                return null;
            }

            return _dataMap.Values.GetEnumerator().Current;
        }

        public override void Resolve(Dictionary<Type, IConfigSingleton> tables)
        {
            foreach (var v in _dataList)
            {
                v.Resolve(tables);
            }

            PostResolve();
        }

        public override void TrimExcess()
        {
            _dataMap.TrimExcess();
            _dataList.TrimExcess();
        }

        public override string ConfigName() => nameof (StartProcessConfig);
    }
}